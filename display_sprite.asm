%define BALLW 8
%define BALLH 8
%define PADW 8
%define PADH 32
%define SCREENW 320
%define SCREENH 200
section .data
     ball db 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x00
          db 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x00
          db 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a
          db 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a
          db 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a
          db 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a
          db 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x00
          db 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x00

     blackBall db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

     playerPad db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d
               db 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x0d

     ballAbsPos dw 32160
     ballXPos dw 160
     ballYPos dw 100

     ballLastAbsPos dw 0
     ballLastXPos dw 0
     ballLastYPos dw 0

     playerPadYPos dw SCREENH/2-PADH/2
     playerPadAbsPos dw SCREENW*(SCREENH/2-PADH/2)

section .text
     displaySprite:
          ; erase last sprite
          mov di, [ballLastAbsPos]
          mov si, blackBall
          call drawBall
          ; draw new sprite
          mov si, ball
          mov di, [ballAbsPos]
          call drawBall

          ; save current position as last position
          mov dx, [ballXPos]
          mov [ballLastXPos], dx
          mov dx, [ballYPos]
          mov [ballLastYPos], dx
          mov dx, [ballAbsPos]
          mov [ballLastAbsPos], dx
          call moveBall

          ; Draw player pad

          mov di, [playerPadAbsPos]
          mov si, playerPad
          call drawPlayerPad

          ret

     drawPlayerPad:
          mov ax, 0xA000
          mov es, ax
          mov dx, PADH
          .eachLine:
              mov cx, 8
              rep movsb
              add di, 320-PADW
              dec dx
              jnz .eachLine
          ret



     drawBall:
          mov ax, 0xA000
          mov es, ax
          mov dx, BALLH
          .eachLine:
              mov cx, 8
              rep movsb
              add di, 320-BALLW
              dec dx
              jnz .eachLine
          ret


